= render 'shared/v2/identity', id: api_v1_people_url(hbx_id: person.authority_member_id), obj: person
- if person.application_group_id.present?
  %n1:application_group_id= render 'shared/v2/identity', id: api_v1_application_group_url(person.application_group_id), obj: nil
- if false #TODO
  %n1:tax_household_id
%n1:person
  = render 'shared/v2/person', person: person





- authority_member = person.authority_member
%n1:is_authoritative= person.is_authoritative?
- unless person.members.empty?
  %n1:aliases
    - person.members.each do |member|
      %n1:alias
        = render 'shared/v2/identity', id: api_v1_people_url(hbx_id:member.hbx_member_id), obj: person
        %n1:is_authoritative= member.authority?

= render 'shared/v2/relationships', person: person
= render 'shared/v2/person_demographics', member: person.authority_member
= render 'shared/v2/roles', person: person
- unless person.responsible_parties.empty?
  %n1:responsible_party_roles
    - person.responsible_parties.each do |responsible_party|
      %n1:responsible_party
        %n1:entity_identifier= responsible_party.entity_identifier
        %n1:organization_id= responsible_party.organization_name
        - policies = responsible_party.policies
        - if policies.present?
          %n1:policies
            - policies.each do |policy|
              %n1:policy= render 'shared/v2/policy_link_type', policy: policy, member: member
- if authority_member.hlh.present?
  %n1:person_health
    %n1:tobacco_user= authority_member.hlh
%n1:application_group_id= api_v1_application_group_url(person.application_groups.first.id)
- if authority_member.is_applicant.present?
  %n1:is_coverage_applicant= authority_member.is_applicant
- if authority_member.is_incarcerated.present?
  %n1:incarcerated_flag= authority_member.is_incarcerated
- unless person.financial_statements.empty?
  %n1:financial_statements
    - person.financial_statements.each do |financial_statement|
      %n1:financial_statement
        %n1:is_primary_applicant= financial_statement.is_primary_applicant
        %n1:tax_filing_status= "urn:openhbx:terms:v1:tax_filer##{financial_statement.tax_filing_status}"
        %n1:is_tax_filing_together= financial_statement.is_tax_filing_together
        %n1:is_enrolled_for_es_coverage= financial_statement.is_enrolled_for_es_coverage
        %n1:is_without_assistance= financial_statement.is_without_assistance
        %n1:is_ia_eligible= financial_statement.is_ia_eligible
        %n1:is_medicaid_chip_eligible= financial_statement.is_medicaid_chip_eligible
        - unless financial_statement.incomes.empty?
          %n1:incomes
            - financial_statement.compute_yearwise(financial_statement.incomes).each do |k, v|
              %n1:total_income
                %n1:calendar_year= k
                %n1:total_income= v
            - financial_statement.incomes.each do |income|
              %n1:income
                %n1:amount= income.amount_in_dollars
                %n1:type= "urn:openhbx:terms:v1:income##{income.income_type}"
                %n1:frequency= "urn:openhbx:terms:v1:income_frequency##{income.frequency}"
                %n1:start_date= income.start_date.try(:strftime,"%Y%m%d")
                - if income.end_date.present?
                  %n1:end_date= income.end_date.try(:strftime,"%Y%m%d")
                %n1:submitted_date= income.submission_date.try(:strftime,"%Y%m%d")
        - unless financial_statement.deductions.empty?
          %n1:deductions
            - financial_statement.compute_yearwise(financial_statement.deductions).each do |k, v|
              %n1:total_income
                %n1:calendar_year= k
                %n1:total_income= v
            - financial_statement.deductions.each do |deduction|
              %n1:deduction
                %n1:amount= deduction.amount_in_dollars
                %n1:type= "urn:openhbx:terms:v1:deduction##{deduction.deduction_type}"
                %n1:frequency= "urn:openhbx:terms:v1:deduction_frequency##{deduction.frequency}"
                %n1:start_date= deduction.start_date.try(:strftime,"%Y%m%d")
                - if deduction.end_date.present?
                  %n1:end_date= deduction.end_date.try(:strftime,"%Y%m%d")
                %n1:submitted_date= deduction.submission_date.try(:strftime,"%Y%m%d")
        - unless financial_statement.alternate_benefits.empty?
          %n1:alternate_benefits
            - financial_statement.alternate_benefits.each do |alternate_benefit|
              %n1:alternate_benefit
                %n1:type= alternate_benefit.kind
                %n1:start_date= alternate_benefit.start_date
                %n1:end_date= alternate_benefit.end_date
                %n1:submitted_date= alternate_benefit.submission_date
        %n1:submission_date=financial_statement.submission_date
%n1:is_active= person.is_active
- unless person.comments.empty?
  = render 'shared/v2/comments', object: person
= render 'shared/v2/timestamp', record: person
